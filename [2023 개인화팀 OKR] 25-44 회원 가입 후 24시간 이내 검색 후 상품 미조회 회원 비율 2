-- 앱에서 가입한 회원 대상, 페이징과 조회도 앱에서 발생
/*
KR3. 키워드 랭킹 500위 내 패션 키워드(브랜드,카테고리) 검색 후 상품을 조회하지 않고 세션을 종료한 2544 신규 고객의 비중 50% 감소
Flurry Analytics 
step1.
signup_complete
step2.
Search_Try (within 1day from last step) 
step3.
item_viewed (within 1day from last step) 
event_location (includes search_result)

KR3의 문제는… 패션키워드…
키워드 랭킹 500위 내 패션키워드 검색 → 바이어 sq. KR과 연관되긴 함..
고민 해당 키워드 검색 후 의 상품조회만 별도로 분석이 가능한지 (가능은 하겠지만 노가다?)
세션을 종료한 고객은 분석이 힘듦 → 조회한 고객을 보는 것으로 조정해야 하는데 현재 얼마나 보고 있는지 알 수 있는 방법이 있을지.
“패션 키워드 검색 고객” 의 사용성만 별도로 분석하는게 의미가 있을지.
*/
with 
-- 회원가입 목록
signup_list as (
  select
  snp.time as signup_time,
  date_parse(td_time_format(snp.time, 'yyyyMMddHHmmss', 'KST'), '%Y%m%d%H%i%s') as signup_timestamp,
  signup.member_idx,
  case signup.member_platform_type
    when '01' then 'iOS'
    when '02' then 'Android'
  end as platform,
  if(LENGTH(dmg.sex) <1 or dmg.sex is null, 'null_gender', dmg.sex) as gender,
  -- coalesce(dmg.sex, 'null_gender') as gender,
  case 
    when dmg.age < 25 then '*-24'
    when dmg.age >= 25 and dmg.age < 35 then '25-34'
    when dmg.age >= 35 and dmg.age < 45 then '35-44'
    when dmg.age >= 45 and dmg.age < 55 then '45-54'
    when dmg.age >= 55 then '55-*'
    else 'null_age'
  end as age_band
  
from
  hellomarket_3.member_signup_platform_tbl as signup
    left join hellomarket_3.member_signup_tbl as snp on snp.member_idx = signup.member_idx
    left join hellomarket.members_demography as dmg on signup.member_idx = dmg.member_idx

where
  TD_TIME_RANGE(snp.time, 
    TD_DATE_TRUNC('day',TD_TIME_ADD(TD_SCHEDULED_TIME(), '-2d'), 'KST'), -- -8d
    TD_DATE_TRUNC('day',TD_TIME_ADD(TD_SCHEDULED_TIME(), '-1d'), 'KST'), -- -1d
    'KST')
  and signup.member_platform_type in ('01', '02') -- 앱에서 가입한 회원 대상
),
 -- Android는 21.8.4(1월4일)부터 한꺼번에 두 페이지 나오는 버그 수정

-- 키워드 있는 검색 기록들
keyword_search as (
  select
    time as search_time,
    date_parse(td_time_format(time, 'yyyyMMddHHmmss', 'KST'), '%Y%m%d%H%i%s') as search_timestamp,
    header_application_memberid as member_idx,
    param_q
  from
    api_log
  where
    td_time_range(api_log.time, 
      TD_DATE_TRUNC('day',TD_TIME_ADD(TD_SCHEDULED_TIME(), '-2d','KST'),'KST'), -- -8d
      TD_DATE_TRUNC('day',TD_TIME_ADD(TD_SCHEDULED_TIME(), '-0d','KST'),'KST'), -- -0d
    'KST')
    and split_part(header_application_client_id, '-',1) = 'hellomarket'
    and header_application_type = 'basic' -- 앱에서만 발생
    and (url = '/search' or url = '/search/items')
    and param_page='1'
    and param_memberidx is NULL
    and param_q is not null
),

-- 키워드 있는 검색 기록들 + 신규회원 조건(24시간 이내)
keyword_by_new_member as (
  select 
  td_time_format(a.search_time, 'yyyy-MM-dd HH:mm:ss', 'KST') search_datetime,
  b.signup_timestamp,
  b.signup_time,
  date_diff('minute', b.signup_timestamp, a.search_timestamp) as time_gap,
  a.param_q,
  b.member_idx,
  b.age_band,
  b.gender,
  b.platform

  from keyword_search a left join signup_list b on a.member_idx = b.member_idx
  
  where 
  b.member_idx is not null
  and date_diff('hour', b.signup_timestamp, a.search_timestamp) < 24
),

-- + 특정 키워드만 걸러내기
popular_filter as (
  select
    a.param_q,
    if(LENGTH(b.popular_keyword)=1, 
      if(CONTAINS(split(a.param_q, ' '), b.popular_keyword), -- 한 글자인 경우는 띄어쓰기 되어 있으면 브랜드값 유효
        b.popular_keyword, 
        null), 
      if(LENGTH(b.popular_keyword)=2,  -- 두 글자인 경우는 띄어쓰기 되어 있거나 맨 앞에 그 두 글자가 나타나면 브랜드값 유효
        if(SUBSTR(a.param_q, 1, 2) = b.popular_keyword or CONTAINS(split(a.param_q, ' '), b.popular_keyword), 
          b.popular_keyword, 
          null), 
        b.popular_keyword)) as keyword_in_popular  -- 세 글자 이상은 무조건 브랜드값 유효
  from (select distinct trim(param_q) as param_q from keyword_by_new_member) a left join popular_keyword b on a.param_q like concat('%',b.popular_keyword,'%')
),

----------조회-----------

-- 검색 결과 상품 조회 기록들
keyword_search_view as (
  select
    time as view_time,
    date_parse(td_time_format(time, 'yyyyMMddHHmmss', 'KST'), '%Y%m%d%H%i%s') as view_timestamp,
    header_application_memberid as member_idx,
    param_keyword,
    url
  from
    api_log
  where
    td_time_range(api_log.time, 
      TD_DATE_TRUNC('day',TD_TIME_ADD(TD_SCHEDULED_TIME(), '-2d','KST'),'KST'), -- -8d
      TD_DATE_TRUNC('day',TD_TIME_ADD(TD_SCHEDULED_TIME(), '-0d','KST'),'KST'), -- -0d
    'KST')
    and split_part(header_application_client_id, '-',1) = 'hellomarket'
    and header_application_type = 'basic' -- 앱에서만 발생
    and regexp_like(url, '^/item/\d{1,}$') and method = 'GET'
    and (param_view_path = 'search_list' or param_view_location = 'search_result')
    and LENGTH(param_keyword) > 0
),

-- 검색 결과 상품 조회 기록들 + 신규회원 조건(24시간 이내)
keyword_by_new_member_view as (
  select 
  td_time_format(a.view_time, 'yyyy-MM-dd HH:mm:ss', 'KST') view_datetime,
  b.signup_timestamp,
  date_diff('minute', b.signup_timestamp, a.view_timestamp) as time_gap,
  a.param_keyword,
  b.member_idx,
  b.age_band,
  b.gender,
  a.url

  from keyword_search_view a left join signup_list b on a.member_idx = b.member_idx
  
  where 
  b.member_idx is not null
  and date_diff('hour', b.signup_timestamp, a.view_timestamp) < 24
),

-- 검색 목록
search_view_list as (
  select
a.member_idx,
a.signup_time,
a.age_band,
a.gender,
a.platform,
a.param_q,
b.keyword_in_popular,
c.url

from keyword_by_new_member a 
  left join popular_filter b on a.param_q = b.param_q
  left join keyword_by_new_member_view c on a.member_idx = c.member_idx and a.param_q = c.param_keyword
), 

-- 가입 집계
signup_cnt as (
  select 
  td_time_format(signup_time, 'yyyy-MM-dd', 'KST') as signup_date, 
  platform, 
  gender, 
  age_band, 
  count(distinct member_idx) as signup_cnt
  from signup_list
  group by 1, 2, 3, 4  
),


-- 검색 집계
search_view_cnt as (
  select
  td_time_format(signup_time, 'yyyy-MM-dd', 'KST') as signup_date,
  platform,
  gender, 
  age_band, 
  count(distinct member_idx) as search_member_cnt,
  count(distinct if(keyword_in_popular is not null, member_idx, null)) as popular_search_member_cnt,
  count(distinct if(url is not null, member_idx, null)) as search_view_member_cnt,
  count(distinct if(keyword_in_popular is not null and url is not null, member_idx, null)) as popular_search_view_member_cnt
  from
  search_view_list
  group by 1, 2, 3, 4
)

select
a.signup_date,
a.platform,
a.gender,
a.age_band,
a.signup_cnt,
b.search_member_cnt,
b.popular_search_member_cnt,
b.search_view_member_cnt,
b.popular_search_view_member_cnt

from signup_cnt as a left join search_view_cnt as b on a.signup_date = b.signup_date and a.platform = b.platform and a.gender = b.gender and a.age_band = b.age_band











