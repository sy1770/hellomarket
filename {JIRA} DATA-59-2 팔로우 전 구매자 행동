-- Q. 언제부터 한 팔로우에 대해서 조사?
-- A. 2023-03-01부터 한 팔로우에 대해서만 member_wish_idx >= 4991050 (2023-09-07 11:34에 추출)

-- Q. 팔로워 회원의 가입일 조건?
-- A. 2023-03-01이후 가입한 회원만 member_idx >= 5821249

-- Q. 팔로우 시점부터 얼마 전까지의 조회를 집계? 
-- A. 1년 전부터의 조회만 포함 

with follow_base as (
  select
  follow_list.member_idx,
  if(LENGTH(dmg.sex) <1 or dmg.sex is null, 'null_gender', dmg.sex) as gender,
  case 
    when dmg.age < 25 then '*-24'
    when dmg.age >= 25 and dmg.age < 35 then '25-34'
    when dmg.age >= 35 and dmg.age < 45 then '35-44'
    when dmg.age >= 45 and dmg.age < 55 then '45-54'
    when dmg.age >= 55 then '55-*'
    else 'null_age'
  end as age_band,

  follow_list.target_member_idx,
  date_parse(follow_list.follow_datetime, '%Y%m%d%H%i%s') as datetime

  from
  follow_list left join members_demography as dmg on follow_list.member_idx = dmg.member_idx

  where
  cast(follow_list.member_idx as integer) >= 5821249  -- 2023-03 이후 가입자의 팔로우 (2023-03 이후의 팔로우는 자동으로 만족)
),


view_list as (
  select 
  td_time_format(api_log.time, 'yyy-MM-dd', 'KST') as view_day,
  date_parse(td_time_format(api_log.time, 'yyyyMMddHHmmss', 'KST'), '%Y%m%d%H%i%s') as view_timestamp,
  header_application_memberid as viewer_idx,
  param_owner_idx as owner_idx,
  SPLIT_PART(url,'/',3) as item_idx,
  CONCAT(header_application_memberid, '-',SPLIT_PART(url,'/',3)) view_uniqid

  from api_log 
  
  where
  TD_TIME_RANGE(api_log.time, '2023-01-01', '2023-09-08', 'KST')
  and split_part(header_application_client_id, '-',1) = 'hellomarket' 
  and regexp_like(url, '^/item/\d{1,}$')
  and param_my_item ='false'
  -- and substr(param_category_id, 1, 3) in ('HAA', 'HAB', 'HBB', 'HAC', 'HBC', 'HBD', 'HAE', 'HBE')
  and method = 'GET'
  and header_application_memberid > '0'
  and cast(header_application_memberid as integer) >= 5821249 --2023년3월 가입자부터
),

wish_list as ( 
  select
    date_parse(td_time_format(api_log.time, 'yyyyMMddHHmmss', 'KST'), '%Y%m%d%H%i%s') as wish_timestamp,
    api_log.header_application_memberid as member_idx,
    SPLIT_PART(api_log.url,'/',3) as item_idx,
    coalesce(view2.owner_idx, owner_temp.member_idx) as owner_idx
  from
    api_log 
      left join (select item_idx, owner_idx from view_list group by 1, 2) as view2 
        on SPLIT_PART(api_log.url,'/',3) = view2.item_idx
      left join hellomarket_3.temp_data59_wish_item_idx_owner_idx as owner_temp
        on SPLIT_PART(api_log.url,'/',3) = owner_temp.item_idx
  where
    td_time_range(api_log.time, '2023-03-01', '2023-09-07', 'KST')
    and regexp_like(url, '^/item/\d{1,}/wish$')
    and method = 'POST'
    and cast(case when length(header_application_memberid)>0 then header_application_memberid else '0' end as integer) >= 5821249
),

visit_list as (
  select
    date_parse(td_time_format(api_log.time, 'yyyyMMddHHmmss', 'KST'), '%Y%m%d%H%i%s') as visit_timestamp,
    header_application_memberid as visitor_idx,
    case when SPLIT_PART(api_log.url,'/',2) = 'items' then SPLIT_PART(api_log.url,'/',4) else param_memberidx end as seller_idx
  from
    api_log
  where
    td_time_range(api_log.time, '2023-03-01', '2023-09-07', 'KST')
    and regexp_like(url, '^/items/member/\d{1,}$|^/search/shop/items$')
    and method = 'GET'
    and param_page = '1'
    and cast(case when length(header_application_memberid)>0 then header_application_memberid else '0' end as integer) >= 5821249
),

view_before_follow as (
  select
    follow_base.member_idx,
    follow_base.target_member_idx,
    count(distinct view_list.view_uniqid) as view_cnt
  from 
    follow_base left join view_list
      on view_list.viewer_idx = follow_base.member_idx 
      and view_list.owner_idx = follow_base.target_member_idx
  where
    follow_base.datetime > view_list.view_timestamp
  group by 1, 2
),

wish_before_follow as (
  select
    follow_base.member_idx,
    follow_base.target_member_idx,
    count(distinct wish_list.item_idx) as wish_cnt
  from 
    follow_base left join wish_list
      on wish_list.member_idx = follow_base.member_idx 
      and wish_list.owner_idx = follow_base.target_member_idx
  where
    follow_base.datetime > wish_list.wish_timestamp
  group by 1, 2
),

visit_before_follow as (
  select
    follow_base.member_idx,
    follow_base.target_member_idx,
    count(visit_list.seller_idx) as visit_cnt
  from 
    follow_base left join visit_list
      on visit_list.visitor_idx = follow_base.member_idx 
      and visit_list.seller_idx = follow_base.target_member_idx
  where
    follow_base.datetime > visit_list.visit_timestamp
  group by 1, 2
)

/*
view_bf_cnt as (
  select 
    follow.member_idx,
    follow.target_member_idx,
    vbf.view_cnt

  from
    follow_base as follow left join view_before_follow as vbf
      on follow.member_idx = vbf.member_idx
      and follow.target_member_idx = vbf.target_member_idx
),

wish_bf_cnt as (
  select 
    follow.member_idx,
    follow.target_member_idx,
    wbf.wish_cnt

  from
    follow_base as follow left join wish_before_follow as wbf
      on follow.member_idx = wbf.member_idx
      and follow.target_member_idx = wbf.target_member_idx
),

visit_bf_cnt as (
  select 
    follow.member_idx,
    follow.target_member_idx,
    vsbf.visit_cnt

  from
    follow_base as follow left join visit_before_follow as vsbf
      on follow.member_idx = vsbf.member_idx
      and follow.target_member_idx = vsbf.target_member_idx
)
*/

select
  follow.member_idx,
  follow.target_member_idx,
  follow.gender,
  follow.age_band,

  wbf.wish_cnt,
  vbf.view_cnt,
  vsbf.visit_cnt

from
 follow_base as follow
  left join wish_before_follow as wbf
    on follow.member_idx = wbf.member_idx
    and follow.target_member_idx = wbf.target_member_idx
  left join view_before_follow as vbf
    on follow.member_idx = vbf.member_idx
    and follow.target_member_idx = vbf.target_member_idx
  left join visit_before_follow as vsbf
    on follow.member_idx = vsbf.member_idx
    and follow.target_member_idx = vsbf.target_member_idx





